// -----------------------------------------------------------
// @sylefeb A SDRAM controller in Silice
//
// SDRAM controller that deals with precharge
// - expects a 16 bits wide SDRAM interface
// - writes single bytes
// - reads bursts of 8 x 16 bits
//
// if using directly the controller:
//  - reads (16x8 bits) have to align with 128 bits boundaries (16 bytes)
//  - writes   (8 bits) do not have this restriction
//
// use the sdram_byte_readcache for a simple byte interface

// AS4C32M16SB (e.g. some ULX3S)
// 4 banks, 8192 rows, 1024 columns, 16 bits words
// ============== addr ================================
//   25 24 | 23 -------- 11 | 10 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

// IS42S16160G (e.g. some ULX3S)
// 4 banks, 8192 rows,  512 columns, 16 bits words
// ============== addr ================================
//   25 24 | 22 -------- 10 |  9 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

// AS4C16M16SA (.e.g some MiSTer SDRAM)
// 4 banks, 8192 rows,  512 columns, 16 bits words
// ============== addr ================================
//   25 24 | 22 -------- 10 |  9 ----- 1 | 0
//   bank  |     row        |   column   | byte (H/L)
// ====================================================

// MIT license, see LICENSE_MIT in Silice repo root
// https://github.com/sylefeb/Silice

$$if not SDRAM_COLUMNS_WIDTH then
$$ if ULX3S then
$$  SDRAM_COLUMNS_WIDTH = 9
$$  print('setting SDRAM_COLUMNS_WIDTH=9 for ULX3S with AS4C32M16 or IS42S16160G chip')
$$  print('Note: the AS4C32M16 is only partially used with this setting')
$$ elseif DE10NANO then
$$   print('setting SDRAM_COLUMNS_WIDTH=9 for DE10NANO with AS4C16M16 chip')
$$   SDRAM_COLUMNS_WIDTH =  9
$$ elseif ICEPI_ZERO then
$$   print('setting SDRAM_COLUMNS_WIDTH=9 for ICEPI_ZERO with W9825G6KH chip')
$$  SDRAM_COLUMNS_WIDTH = 9
$$ elseif SIMULATION then
$$   print('setting SDRAM_COLUMNS_WIDTH=9 for simulation')
$$   SDRAM_COLUMNS_WIDTH = 9
$$ else
$$   error('SDRAM_COLUMNS_WIDTH not specified')
$$ end
$$end

import('inout16_set.v')

$$if ULX3S or ICEPI_ZERO then
import('inout16_ff_ulx3s.v')
import('out1_ff_ulx3s.v')
import('out2_ff_ulx3s.v')
import('out13_ff_ulx3s.v')

$$ULX3S_IO = true

$$end

// -----------------------------------------------------------

circuitry command(
  output sdram_cs,output sdram_ras,output sdram_cas,output sdram_we,input cmd)
{
  sdram_cs  = cmd[3,1];
  sdram_ras = cmd[2,1];
  sdram_cas = cmd[1,1];
  sdram_we  = cmd[0,1];
}

// -----------------------------------------------------------

algorithm sdram_controller_r128_w8(
        // sdram pins
        // => we use immediate (combinational) outputs as these are registered
        //    explicitely using dedicqted primitives when available / implemented
        output! uint1   sdram_cle,
        output! uint1   sdram_cs,
        output! uint1   sdram_cas,
        output! uint1   sdram_ras,
        output! uint1   sdram_we,
        output! uint2   sdram_dqm,
        output! uint2   sdram_ba,
        output! uint13  sdram_a,
        // data bus
$$if VERILATOR then
        input   uint16  dq_i,
        output! uint16  dq_o,
        output! uint1   dq_en,
$$else
        inout   uint16  sdram_dq,
$$end
        // interface
        sdram_provider sd,
$$if SIMULATION then
        output uint1 error,
$$end
) <autorun>
{

  // SDRAM commands
  uint4 CMD_UNSELECTED    = 4b1000;
  uint4 CMD_NOP           = 4b0111;
  uint4 CMD_ACTIVE        = 4b0011;
  uint4 CMD_READ          = 4b0101;
  uint4 CMD_WRITE         = 4b0100;
  uint4 CMD_TERMINATE     = 4b0110;
  uint4 CMD_PRECHARGE     = 4b0010;
  uint4 CMD_REFRESH       = 4b0001;
  uint4 CMD_LOAD_MODE_REG = 4b0000;

  uint1   reg_sdram_cs  = uninitialized;
  uint1   reg_sdram_cas = uninitialized;
  uint1   reg_sdram_ras = uninitialized;
  uint1   reg_sdram_we  = uninitialized;
  uint2   reg_sdram_dqm = uninitialized;
  uint2   reg_sdram_ba  = uninitialized;
  uint13  reg_sdram_a   = uninitialized;
  uint16  reg_dq_o      = 0;
  uint1   reg_dq_en     = 0;

  uint4   opened        = 0;

$$if not VERILATOR then

  uint16 dq_i      = 0;

$$if ULX3S_IO then

  inout16_ff_ulx3s ioset(
    clock           <:  clock,
    io_pin          <:> sdram_dq,
    io_write        <:: reg_dq_o,
    io_read         :>  dq_i,
    io_write_enable <:: reg_dq_en
  );

  out1_ff_ulx3s  off_sdram_cs (clock <: clock, pin :> sdram_cs , d <:: reg_sdram_cs );
  out1_ff_ulx3s  off_sdram_cas(clock <: clock, pin :> sdram_cas, d <:: reg_sdram_cas);
  out1_ff_ulx3s  off_sdram_ras(clock <: clock, pin :> sdram_ras, d <:: reg_sdram_ras);
  out1_ff_ulx3s  off_sdram_we (clock <: clock, pin :> sdram_we , d <:: reg_sdram_we );
  out2_ff_ulx3s  off_sdram_dqm(clock <: clock, pin :> sdram_dqm, d <:: reg_sdram_dqm);
  out2_ff_ulx3s  off_sdram_ba (clock <: clock, pin :> sdram_ba , d <:: reg_sdram_ba );
  out13_ff_ulx3s off_sdram_a  (clock <: clock, pin :> sdram_a  , d <:: reg_sdram_a  );

$$elseif DE10NANO then

  inout16_set ioset(
    clock           <:  clock,
    io_pin          <:> sdram_dq,
    io_write        <:  reg_dq_o,
    io_read         :>  dq_i,
    io_write_enable <:  reg_dq_en
  );

$$else

  inout16_set ioset(
    clock           <:  clock,
    io_pin          <:> sdram_dq,
    io_write        <:  reg_dq_o,
    io_read         :>  dq_i,
    io_write_enable <:  reg_dq_en
  );

$$end
$$end

  uint4  cmd = 7;

  uint4  row_open    = 0;
  uint13 row_addr[4] = uninitialized;

  uint1  work_todo   = 0;
  uint13 row         = 0;
  uint2  bank        = 0;
  uint10 col         = 0;
  uint8  data        = 0;
  uint1  do_rw       = 0;
  uint1  byte        = 0;

$$ refresh_cycles      = 750 -- assume 100 MHz
$$ refresh_wait        = 7
$$ cmd_active_delay    = 2
$$ cmd_precharge_delay = 3
$$ print('SDRAM configured for 100 MHz (default)')

  uint10 refresh_count = -1;

  // waits for incount + 4 cycles
  subroutine wait(input uint16 incount)
  {
    uint17 count = uninitialized;
    count = incount;
    while (count > 0) {
      count = count - 1;
    }
  }

$$if SIMULATION then
  error := 0;
$$end

  sdram_cle := 1;
$$if not ULX3S_IO then
  sdram_cs  := reg_sdram_cs;
  sdram_cas := reg_sdram_cas;
  sdram_ras := reg_sdram_ras;
  sdram_we  := reg_sdram_we;
  sdram_dqm := reg_sdram_dqm;
  sdram_ba  := reg_sdram_ba;
  sdram_a   := reg_sdram_a;
$$if VERILATOR then
  dq_o      := reg_dq_o;
  dq_en     := reg_dq_en;
$$end
$$end

  sd.done := 0;

  always { // always block tracks in_valid

    cmd = CMD_NOP;
    (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
    if (sd.in_valid) {
      // -> copy inputs
      bank      = sd.addr[24, 2]; // bits 24-25
      row       = sd.addr[$SDRAM_COLUMNS_WIDTH+1$, 13];
      col       = sd.addr[                      1, $SDRAM_COLUMNS_WIDTH$];
      byte      = sd.addr[ 0, 1];
      data      = sd.data_in;
      do_rw     = sd.rw;
      // -> signal work to do
      work_todo = 1;
    }
  }

  // wait after powerup
  reg_sdram_a  = 0;
  reg_sdram_ba = 0;
  reg_dq_en    = 0;
  () <- wait <- (131071); // 1+ msec at 100MHz

  // precharge all
  cmd      = CMD_PRECHARGE;
  (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
  reg_sdram_a  = {2b0,1b1,10b0};
  () <- wait <- ($cmd_precharge_delay-3$);

  // load mod reg
  cmd      = CMD_LOAD_MODE_REG;
  (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
  reg_sdram_ba = 0;
  reg_sdram_a  = {3b000, 1b1, 2b00, 3b011/*CAS*/, 1b0, 3b011 /*burst x8*/};
  () <- wait <- (0);

  while (1) {

    // precharge?
    if (refresh_count == 0 || (work_todo && row_open[bank,1] == 1 && row_addr[bank] != row)) {
      reg_sdram_ba = bank;
      cmd          = CMD_PRECHARGE;
      (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
      reg_sdram_a  = {2b0,refresh_count == 0/*all*/,10b0};
      row_open     = (refresh_count == 0) ? 0 : row_open;
      () <- wait <- ($cmd_precharge_delay-3$);
    }

    // refresh?
    if (refresh_count == 0) {
      cmd           = CMD_REFRESH;
      (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
      // wait
      () <- wait <- ($refresh_wait-3$);
      // -> reset count
      refresh_count = $refresh_cycles$;
    }

    refresh_count = refresh_count - 1;

    if (work_todo) {
      work_todo    = 0;
      reg_sdram_ba = bank;
      if (row_open[bank,1] == 0 || row_addr[bank] != row) {
        // -> activate next
        reg_sdram_a  = row;
        cmd          = CMD_ACTIVE;
        (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
$$for i=1,cmd_active_delay do
++:
$$end
      }
      // row is now active
      row_open[bank,1] = 1;
      row_addr[bank]   = row;
      // write or read?
      if (do_rw) {
        // __display("<sdram: write %x>",data);
        // write
        cmd       = CMD_WRITE;
        (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
        reg_dq_en     = 1;
        reg_sdram_a   = {2b0, 1b0/*do not auto-precharge*/, col};
        reg_dq_o      = {data,data};
        reg_sdram_dqm = {~byte,byte};
        // signal done
        sd.done       = 1;
++:       // wait one cycle to enforce tWR
      } else {
        // read
        cmd         = CMD_READ;
        (reg_sdram_cs,reg_sdram_ras,reg_sdram_cas,reg_sdram_we) = command(cmd);
        reg_dq_en       = 0;
        reg_sdram_dqm   = 2b0;
        reg_sdram_a     = {2b0, 1b0/*do not auto-precharge*/, col};
        // wait CAS cycles
++:
++:
++:
$$if ULX3S_IO then
++: // dq_i latency
++:
$$end
$$if ICARUS then
++:
$$end
        // burst 8 x 16 bytes
        {
          uint8 read_cnt = 0;
          while (read_cnt < 8) {
            sd.data_out[{read_cnt,4b0000},16] = dq_i;
            read_cnt     = read_cnt + 1;
            sd.done      = (read_cnt[3,1]); // data_out is available
          }
        }
      }

++: // enforce tRP
++:
++:

    } // work_todo

  }
}

// -----------------------------------------------------------
