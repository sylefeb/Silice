// SL 2023-08 @sylefeb
//
// Cache for the ice-v-swirl
//
// directly mapped
//
// IMPORTANT: when wait goes high, memory interface should not change
//   their inputs!
// WARNING: Currently the two caches do not see writes into one another if
//   both are caching the same lines.
//   This is ok when using mem0 for instructions and mem1 for data as long as
//   code is not loaded/generated and then executed. Otherwiwe a software
//   cache flush is required.
// TODO: Implement a mechanism to avoid this issue?
// NOTE: when writing, the read value is undertermined (it is the previously
//       stored value but this is subject to change)
// NOTE: if SPIFLASH is present, it is never selected at the same time as
//       the PSRAM so they could share the other SPI com lines.
// NOTE: SPRAM and SPIFLASH are assumed the same width.
//
// PRE-PROCESSOR PARAMETERS:
// - ramW is the memory cached space address width
//   (if SPIFLASH is present, the highest bit selects it)
// - cache_has_spiflash indicates SPIFLASH is present
//
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

/*

How does this work?
-------------------

This is a double 32bits cache storing data in SPRAM (64KB each). Both caches
work the same and can be used for data/instructions for instance. Beware they
do not 'see' each other when a line at a same address is mapped by both (so
keep instructions read only).
As both caches operate the same, the description next considers only cache 0.

The cache uses a simple direct mapping. A BRAM (cache0_lines) stores the upper
parts of the cache line addresses. An example setup is cache lines of 256x32bits,
on 64 cache lines.

Reading:
-------
The read is performed while cache0_lines is accessed. If the upper address
match, it's a hit. Otherwise, bad luck, wait goes high immediately. On the next
cycle the cache will start the process of writing back (if needed) the current
line content, and then reading the new content, before releasing wait.

Writing:
-------
We cannot perform the writes blindly, as we first have to know whether the
current line is the correct one. However we do know which line was previously
accessed, and if it has not changed (still the same line) we can check the upper
addresses immediately. Otherwise we have no choice but to raise wait for one
cycle, until the result from looking up cache0_lines is available.

*/

// from the outside the cache acts as a BRAM when filled
interface bram_provider
{
  input   wenable,
  input   wdata,
  output! rdata,
  input   addr,
}

// SPRAM can store 12384 x 32bits for one cache, 14 bits address
// ram address is split as:
//
// [      cache addr     |       line id         |        line addr        ]
// <--- cache_addr_w ---> <- num_cache_lines_w -> <----- cache_line_w ----->
// <--------------------------------- ramW -------------------------------->
//                       ^<-------------------- 14 bits ------------------->
//                       |
//                       cache_addr_start
//
$$cache_line_w          = 3 -- has to be < 14
$$cache_line_size       = 1 << cache_line_w
$$num_cache_lines_w     = (14 - cache_line_w)
$$num_cache_lines       = 1 << num_cache_lines_w
$$cache_addr_w          = ramW - 14
$$cache_addr_start      = 14
$$if cache_has_spiflash then
$$cache_memW            = ramW - 1 -- ram/rom actual addr width
$$else
$$cache_memW            = ramW
$$end
$$cache_ext_w           = cache_memW - 14  -- cached addr width of ram/rom

$$print('<<cache configuration>> ' .. num_cache_lines
$$       .. ' cache lines of ' .. cache_line_size .. ' int32')

// --------------------------------------------------
// cache unit
// --------------------------------------------------
unit cache(
  // bram interfaces
  bram_provider mem0,
  bram_provider mem1,
  // wait goes high when cache cannot answer immediately
  // this happens the cycle after the missed address is set
  output! uint1 wait(1),
  // clock 2x for ram
  input   uint1 clock2x,
  // ram io
  inout   uint1 ram_io0,  inout   uint1 ram_io1,
  inout   uint1 ram_io2,  inout   uint1 ram_io3,
  output  uint1 ram_clk,  output  uint1 ram_csn,
$$if cache_has_spiflash then
  // spiflash io
  inout   uint1 sf_io0,  inout   uint1 sf_io1,
  output  uint1 sf_clk,  output  uint1 sf_csn,
$$end
) {

  // cache memory (SPRAM, FLASH)
  //
  // cache for mem0 is spram0,spram1 (2x 16 bits)
  // cache for mem1 is spram2,spram3 (2x 16 bits)
  //
  // each cache stores 16K x int32
  // thus 2^(14 - cache_line_w) lines of 2^cache_line_w int32
  //
  // If FLASH is present, the highest bit is used to select
  // between SPRAM and FLASH, with SPRAM in the lower range
  // (this makes SPRAM and FLASH the same size)

$$for n=0,3 do
$$if SIMULATION then
  simulation_spram spram$n$;
$$else
  ice40_spram      spram$n$(clock <: clock);
$$end
$$end

$$init_value=''
$$for b=1,cache_addr_w do
$$  init_value = '1' .. init_value
$$end
$$init_value = (cache_addr_w+1) .. 'b0' .. init_value

  // cache mapping, stores for each line the upper address part, and a dirty bit
  bram uint$cache_addr_w+1$ cache0_lines[$num_cache_lines$] = {pad($init_value$)};
  bram uint$cache_addr_w+1$ cache1_lines[$num_cache_lines$] = {pad($init_value$)};
  //                     ^ dirty bit

$$for c=0,1 do
  // determines whether requested addr match the corresponding cache line
  uint$num_cache_lines_w$ line$c$_id    <: mem$c$.addr[$cache_line_w$,$num_cache_lines_w$];
  uint1                   cache$c$_hit <:: qaddr$c$[$cache_addr_start$,$cache_addr_w$]
                                        == :cache$c$_lines.rdata[0,$cache_addr_w$];
  uint1                   cache$c$_canwrite <:: (:line$c$_id == qline$c$_id)
                                        && :mem$c$.addr[$cache_addr_start$,$cache_addr_w$]
                                        == :cache$c$_lines.rdata[0,$cache_addr_w$];
  // registers for memory interface inputs
  uint$num_cache_lines_w$ qline$c$_id(0);
  uint$ramW$              qaddr$c$(0);
  uint4                   qwen$c$(0);
$$if cache_has_spiflash then
  uint1                   in_rom$c$ <: mem$c$.addr[$ramW-1$,1];
$$else
  uint1                   in_rom$c$(0);
$$end
$$end

$$if SIMULATION then
  uint32 cycle(0);
$$end

  // external PSRAM
  qpsram_ram ram<@clock2x>(
    ram_csn  :> ram_csn,    ram_clk  :> ram_clk,
    ram_io0 <:> ram_io0,    ram_io1 <:> ram_io1,
    ram_io2 <:> ram_io2,    ram_io3 <:> ram_io3,
  );
  adapt_data_next adapt<@clock2x>(data_next_2x <: ram.data_next,
                                  rdata_2x     <: ram.rdata);
  uint1 reg_ram_datanext(0);
  uint8 reg_ram_rdata(0);
  uint1 reg_ram_wstream(0);

$$if cache_has_spiflash then
  // external FLASH (runs at 1x and dual SPI, 'slow' ROM)
  spiflash_rom_core rom(
    sf_clk  :> sf_clk,   sf_csn  :> sf_csn,
    sf_io0 <:> sf_io0,   sf_io1 <:> sf_io1,
  );
$$end

  // cache internal state
  uint1 update_lines_todo(0);
  uint1 update_lines_done(0);
  uint1 write_cycle(0);
  uint1 keep_wait(0);
  uint1 write_fault(0);

$$if SIMULATION then
  uint1 debug_on(0);
$$end

  always_before {
$$if SIMULATION then
    if (mem0.addr[$periph$,1] || mem1.addr[$periph$,1]) {
      __display("ERROR cache: access on peripheral address");
      __finish();
    }
$$if cache_has_spiflash then
    if ((in_rom0 & (|mem0.wenable))
     || (in_rom1 & (|mem1.wenable)) ) {
      __display("ERROR cache: write in ROM space (@%x)",in_rom0 ? mem0.addr : mem1.addr);
      __finish();
    }
$$end
    debug_on = 0; // cycle > 3010340;
$$end
/*
    __display("[%d] >> cache status in: @%x|@%x q: @%x|@%x miss: %b|%b ln: %x|%x",
                cycle,mem0.addr<<2,mem1.addr<<2,
                qaddr0<<2,qaddr1<<2,
                ~cache0_hit,~cache1_hit,
                cache0_lines.rdata, cache1_lines.rdata);
    __display("[%d] >> cache status in: todo: %b",cycle,update_lines_todo);
    __display("[%d] >> cache status in: wen0: %b wdata0:%x",cycle,mem0.wenable,mem0.wdata);
    __display("[%d] >> cache status in: wen1: %b wdata1:%x",cycle,mem1.wenable,mem1.wdata);
*/
    // cache lookup
    cache0_lines.addr    = line0_id;
    cache1_lines.addr    = line1_id;
    cache0_lines.wenable = 0;
    cache1_lines.wenable = 0;
    // ram access
    ram.in_ready         = 0; // maintain low, pulse high to read/write
    ram.init             = 0; // maintain low, pulse high to init
    ram.wenable          = 0; // maintain low, set high when writing
$$if cache_has_spiflash then
    rom.in_ready         = 0; // maintain low, pulse high to read
$$end
    // default lookup
    mem0.rdata           = {spram1.data_out,spram0.data_out};
    mem1.rdata           = {spram3.data_out,spram2.data_out};
    spram0.addr          = {line0_id,mem0.addr[0,$cache_line_w$]};
    spram1.addr          = {line0_id,mem0.addr[0,$cache_line_w$]};
    spram2.addr          = {line1_id,mem1.addr[0,$cache_line_w$]};
    spram3.addr          = {line1_id,mem1.addr[0,$cache_line_w$]};
    spram0.wmask         = {{2{mem0.wenable[1,1]}},{2{mem0.wenable[0,1]}}};
    spram1.wmask         = {{2{mem0.wenable[3,1]}},{2{mem0.wenable[2,1]}}};
    spram0.wenable       = (|mem0.wenable) & cache0_canwrite;
    spram1.wenable       = (|mem0.wenable) & cache0_canwrite;
    spram0.data_in       = mem0.wdata[ 0,16];
    spram1.data_in       = mem0.wdata[16,16];
    spram2.wmask         = {{2{mem1.wenable[1,1]}},{2{mem1.wenable[0,1]}}};
    spram3.wmask         = {{2{mem1.wenable[3,1]}},{2{mem1.wenable[2,1]}}};
    spram2.wenable       = (|mem1.wenable) & cache1_canwrite;
    spram3.wenable       = (|mem1.wenable) & cache1_canwrite;
    spram2.data_in       = mem1.wdata[ 0,16];
    spram3.data_in       = mem1.wdata[16,16];
    // if both caches missed, raise wait
    wait                 = reset | ~cache0_hit | ~cache1_hit
    //                     ^^^^^ wait during reset
                         | write_cycle | keep_wait | write_fault;
    write_cycle          = 0; // additional cycle for writes, after an update
    keep_wait            = 0; // see note where set
    write_fault          = ((|mem0.wenable) & ~cache0_canwrite)
                         | ((|mem1.wenable) & ~cache1_canwrite);

    //if (cache1_hit & (|mem1.wenable) & ~cache1_canwrite) {
    //  __display("[%d] cache1 write fault @%x <= %x (line: %d,%d prev@%x)",cycle,mem1.addr<<2,mem1.wdata,line1_id,qline1_id,qaddr1);
    //}
    //if (spram2.wenable) {
    //  __display("[%d] cache1 write on line @%x <= %x",cycle,mem1.addr<<2,mem1.wdata);
    //}
    //if (~cache0_hit | ~cache1_hit) {
    //  __display("[%d] >> cache miss %b|%b %x|%x",cycle,~cache0_hit,~cache1_hit,qaddr0<<2,qaddr1<<2);
    //}
  }

  algorithm <autorun> {

    // init QPSRAM     NOTE: assume already initialized for now
    // ram.init = 1;
    // while (ram.busy) {}

    // main loop

    while (1) {
      if (update_lines_todo
$$if cache_has_spiflash then
        & ~rom.busy
$$end
      ) {
        // there is a pending cache miss
$$if SIMULATION then
        //if (debug_on) {
        //  __display("[%d] => cache miss %b|%b %x|%x (%x_%d|%x_%d)",cycle,
        //    ~cache0_hit,~cache1_hit,
        //    {qaddr0,2b00},{qaddr1,2b00},
        //    cache0_lines.rdata[0,$cache_addr_w$],cache0_lines.addr,
        //    cache1_lines.rdata[0,$cache_addr_w$],cache1_lines.addr);
        //}
$$end
        // if line is dirty, store back
        //                  vvvvv start by cache0, then cache1
        uint1 line_dirty = ~cache0_hit ? cache0_lines.rdata[$cache_addr_w$,1]
                                       : cache1_lines.rdata[$cache_addr_w$,1];
        if (line_dirty) {
          // store back line as it was written to
          uint$cache_memW$ storeAddr =
            ~cache0_hit ? {cache0_lines.rdata[0,$cache_ext_w$],qline0_id,$cache_line_w$b0}
                        : {cache1_lines.rdata[0,$cache_ext_w$],qline1_id,$cache_line_w$b0};
          uint$cache_line_w+2+1$ n = 0;
$$if SIMULATION then
          if (debug_on) {
            __display("[%d] => [cache %b] writing at @%x from line %d",cycle,cache0_hit,storeAddr<<2,~cache0_hit ? qline0_id : qline1_id);
          }
$$end
          // write start addr
          ram.addr       = {storeAddr,2b00};
          while (~n[$cache_line_w+2$,1]) {
            // maintain write status
            ram.in_ready = 1;
            ram.wenable  = 1;
            // vvvvv NOTE: on first iteration spramN.data_out is not ready yet,
            // however the QPSRAM controller does not access it immediately
            //
            ram.wdata    = ~cache0_hit
                        ? {spram1.data_out,spram0.data_out} >> {n[0,2],3b0}
                        : {spram3.data_out,spram2.data_out} >> {n[0,2],3b0};
            // next?
            if (reg_ram_wstream) {
$$if SIMULATION then
              //uint32 full = ram.addr + n;
              //if (full[8,16] == 16h14cd || debug_on) {
              //  __display("store @%x = %x (cache %b, line %d, cycle %d)",full,ram.wdata,cache0_hit,~cache0_hit ? qline0_id : qline1_id,cycle);
              //}
              // __write("%x,",ram.wdata);
$$end
              // next
              n = n + 1;
            }
            // read in cache 0
            spram0.addr    = {qline0_id,n[2,$cache_line_w$]};
            spram1.addr    = {qline0_id,n[2,$cache_line_w$]};
            // read in cache 1
            spram2.addr    = {qline1_id,n[2,$cache_line_w$]};
            spram3.addr    = {qline1_id,n[2,$cache_line_w$]};
          }
          // __display(" ");
++:       // this one cycle pause is needed before starting to read, otherwise
          // data_next from the write remains visible to the read (latencies)
        }
        // fetch new line
        uint$cache_memW$ fetchAddr =
          ~cache0_hit ? {qaddr0[$cache_line_w$,$cache_memW-cache_line_w$],
                                $cache_line_w$b0}
                      : {qaddr1[$cache_line_w$,$cache_memW-cache_line_w$],
                                $cache_line_w$b0};
        uint$cache_line_w+2+1$ n = 0;
        ram.addr     = {fetchAddr,2b00};
$$if cache_has_spiflash then
        rom.addr     = {fetchAddr,2b00};
$$if SIMULATION then
        rom.addr     = {1b1,fetchAddr,2b00};
        //              ^^^ goes to high part of data file in simulation
$$end
$$end
$$if SIMULATION and cache_has_spiflash then
        // __display("[%d] +> cache miss %b|%b %x|%x",cycle,~cache0_hit,~cache1_hit,qaddr0<<2,qaddr1<<2);
        if (debug_on) {
          uint1 in_rom = ~cache0_hit ? in_rom0 : in_rom1;
          __display("[%d] => [cache %b] fetching from @%x in line %d (in_rom:%b)",cycle,cache0_hit,in_rom?rom.addr:ram.addr,~cache0_hit ? qline0_id : qline1_id,in_rom);
        }
$$end
        while (~n[$cache_line_w+2$,1]) {
          ram.in_ready = ~cache0_hit ? ~in_rom0 : ~in_rom1;
$$if cache_has_spiflash then
          rom.in_ready = ~cache0_hit ?  in_rom0 :  in_rom1;
          if (reg_ram_datanext || rom.rdata_available) {
$$else
          if (reg_ram_datanext) {
$$end
            uint4  wmask   = 2b11 << {n[0,1],1b0};
$$if cache_has_spiflash then
            uint16 wdata   = (ram.in_ready ? reg_ram_rdata : rom.rdata) << {n[0,1],3b0};
$$else
            uint16 wdata   = reg_ram_rdata << {n[0,1],3b0};
$$end
            $$if SIMULATION then
            //if (debug_on) {
            //  uint32 full = ram.addr + n;
            //  __display("[cache|%d] load @%x = %x (cache %b, line %d, cycle %d, n %d, ram:%b rom:%b)",
            //            cycle,full,reg_ram_rdata,cache0_hit,~cache0_hit ? qline0_id : qline1_id,cycle,n,reg_ram_datanext,rom.rdata_available);
            //}
            // __write("%x,", (ram.in_ready ? reg_ram_rdata : rom.rdata));
            $$end
            // cache 0
            spram0.addr    = {qline0_id,n[2,$cache_line_w$]};
            spram1.addr    = {qline0_id,n[2,$cache_line_w$]};
            spram0.data_in = wdata;
            spram1.data_in = wdata;
            spram0.wmask   = wmask;
            spram1.wmask   = wmask;
            spram0.wenable = ~cache0_hit & ~n[1,1];
            spram1.wenable = ~cache0_hit &  n[1,1];
            // cache 1
            spram2.addr    = {qline1_id,n[2,$cache_line_w$]};
            spram3.addr    = {qline1_id,n[2,$cache_line_w$]};
            spram2.data_in = wdata;
            spram3.data_in = wdata;
            spram2.wmask   = wmask;
            spram3.wmask   = wmask;
            spram2.wenable = cache0_hit & ~n[1,1];
            spram3.wenable = cache0_hit &  n[1,1];
            // next
            n = n + 1;
          }
        }
        // __display(" ");
        // update cache register
        if (~cache0_hit) {
          cache0_lines.wdata   = {1b0,qaddr0[$cache_addr_start$,$cache_addr_w$]};
          cache0_lines.wenable = 1;
        } else {
          cache1_lines.wdata   = {1b0,qaddr1[$cache_addr_start$,$cache_addr_w$]};
          cache1_lines.wenable = 1;
        }
        keep_wait         = 1; // IMPORTANT: keeps wait high during bram transaction
                               // otherwise results depends on bram read-on-write
                               // behavior
                               // NOTE: simply keep wait high while loop active?
++:     // wait for cache lines bram to be written
        update_lines_done = 1; // done
        write_cycle       = 1; // keeps wait high while write to cache line occurs
                               // TODO: only if indeed writing?
$$if SIMULATION then
        // __display("[%d] cache done.",cycle);
$$end
      } else {
        // if no cache miss, maintain dirty flag
        uint1 upd_line0      = (|mem0.wenable) & cache0_canwrite & ~in_rom0;
        uint1 upd_line1      = (|mem1.wenable) & cache1_canwrite & ~in_rom1;
$$if SIMULATION then
        // __display("[%d] dirty status update %b|%b",cycle,upd_line0,upd_line1);
$$end
        cache0_lines.wdata   = {upd_line0,$cache_addr_w$b0} | cache0_lines.rdata;
        cache0_lines.wenable = upd_line0;
        cache1_lines.wdata   = {upd_line1,$cache_addr_w$b0} | cache1_lines.rdata;
        cache1_lines.wenable = upd_line1;
      }
    }

  }

  always_after {
    // note that cache lines have to be updated next cycle
    update_lines_todo = ~reset & (~cache0_hit|~cache1_hit) & ~update_lines_done;
    update_lines_done = 0;
    // register inputs from memory interfaces: improves fmax and 'free'
    // as cache update always occurs a cycle after memory interfaces change
    qline0_id = line0_id;     qline1_id = line1_id;
    qaddr0    = mem0.addr;    qaddr1    = mem1.addr;
    qwen0     = mem0.wenable; qwen1     = mem1.wenable;
    // cross clock domain
    reg_ram_datanext    = adapt.data_next;
    reg_ram_rdata       = adapt.rdata;
    reg_ram_wstream     = ram.wstream_1x;
/*
    __display("[%d] >> cache status out: @%x|@%x q: @%x|@%x miss: %b|%b ln: %x|%x ln@: %x|%x  lnw: %b|%b",
                cycle,mem0.addr<<2,mem1.addr<<2,
                qaddr0<<2,qaddr1<<2,
                ~cache0_hit,~cache1_hit,
                cache0_lines.rdata, cache1_lines.rdata,
                cache0_lines.addr, cache1_lines.addr,
                cache0_lines.wenable, cache1_lines.wenable,
                );
    __display("[%d] >> cache status out: todo: %b",cycle,update_lines_todo);
*/
$$if SIMULATION then
    cycle = cycle + 1;
$$end
  }

}

// --------------------------------------------------
// unit to adapt data next signal across clock domain
// - should run at 2x
// --------------------------------------------------

unit adapt_data_next(
  input uint1 data_next_2x,  output uint1 data_next,
  input uint8 rdata_2x,      output uint8 rdata)
{
  uint2  dnext(0);
  always {
    dnext      = data_next_2x ? 2b11     : {1b0,dnext[1,1]};
    rdata      = data_next_2x ? rdata_2x : rdata;
    data_next  = dnext[0,1];
  }
}

// --------------------------------------------------
