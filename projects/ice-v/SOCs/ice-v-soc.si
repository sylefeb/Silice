// SL 2020-06-12 @sylefeb
//
// Fun with RISC-V!
// RV32I cpu, see README.md
//
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root

// Clocks
$$if ICESTICK then
import('../../common/plls/icestick_60.v')
$$elseif FOMU then
import('../../common/plls/fomu_20.v')
$$elseif ICEBREAKER or ICEBITSY then
import('../../common/plls/icebrkr_25.v')
$$ICEV_FAST_SHIFT = 1
$$end

$$config['bram_wmask_byte_wenable_width'] = 'data'

// pre-compilation script, embeds compiled code within a string
$$dofile('pre_include_compiled.lua')

$$addrW = 12

// include the processor
$include('../CPUs/ice-v.si')

// --------------------------------------------------
// SOC
// --------------------------------------------------

group bram_io
{
  uint4       wenable(0),
  uint32      wdata(0),
  uint32      rdata(0),
  uint$addrW$ addr(0),    // boot address
}

unit main( // I guess this is the SOC :-D
  output uint5 leds,
$$if OLED then
  output uint1 oled_clk,
  output uint1 oled_mosi,
  output uint1 oled_dc,
  output uint1 oled_resn,
  output uint1 oled_csn(0),
$$if VERILATOR then
  output uint2  spiscreen_driver(1/*SSD1351*/),
  output uint10 spiscreen_width(128),
  output uint10 spiscreen_height(128),
$$end
$$end
$$if PMOD then
  inout  uint8 pmod,
$$end
$$if SPIFLASH then
  output uint1 sf_clk,
  output uint1 sf_csn,
  output uint1 sf_mosi,
  input  uint1 sf_miso,
$$end
)
$$if not SIMULATION then
  <@cpu_clock> {
  // clock
  uint1 cpu_clock  = uninitialized;
  pll clk_gen (
    clock_in  <: clock,
    clock_out :> cpu_clock
  );
$$else
 {
$$end

$$if OLED or PMOD then
  uint1 displ_en = uninitialized;
  uint1 displ_dta_or_cmd <: memio.wdata[10,1];
  uint8 displ_byte       <: memio.wdata[0,8];
  oled display(
    enable          <: displ_en,
    data_or_command <: displ_dta_or_cmd,
    byte            <: displ_byte,
    oled_din        :> oled_mosi,
    oled_clk        :> oled_clk,
    oled_dc         :> oled_dc,
  );
$$end

$$if PMOD then
  // audio
  int16 audio_sample(0);
  audio_pcm_i2s audio( sample <: audio_sample );
	// oled
	uint1 oled_clk(0);
  uint1 oled_mosi(0);
  uint1 oled_dc(0);
  uint1 oled_resn(0);
$$end

$$if SPIFLASH or SIMULATION then
  // spiflash
  uint1       reg_miso(0);
	// for spiflash memory mapping, need to record prev. cycle addr and rw
	uint$addrW$ prev_mem_addr(0);
	uint1       prev_mem_rw(0);
$$end
$$if SIMULATION then
   uint32 cycle(0);
$$end

  // ram
  // - intermediate interface to perform memory mapping
  bram_io memio;
  // - uses template "bram_wmask_byte", that turns wenable into a byte mask
  bram uint32 mem<"bram_wmask_byte">[1536] = $meminit$;

  // cpu
  rv32i_cpu cpu( mem <:> memio );

  // io mapping
  always_before {
	  // ---- memory access
    mem.wenable = memio.wenable & {4{~memio.addr[11,1]}};
		//                            ^^^^^^^ no BRAM write if in peripheral addresses
$$if SPIFLASH or SIMULATION then
    memio.rdata = (prev_mem_addr[11,1] & prev_mem_addr[4,1]/* & ~prev_mem_rw*/) ? {31b0,reg_miso} : mem.rdata;
$$if SMIULATION then
    if ( prev_mem_addr[11,1] & prev_mem_addr[4,1] & ~prev_mem_rw ) { __display("[cycle %d] SPI read: %d",cycle,memio.rdata); }
$$end
		prev_mem_addr = memio.addr;
		prev_mem_rw   = memio.wenable[0,1];
$$else
    memio.rdata   = mem.rdata;
$$end
    mem.wdata     = memio.wdata;
    mem.addr      = memio.addr;
		// ---- peripherals
$$if OLED or PMOD then
    displ_en = 0; // maintain display enable low
$$end
$$if PMOD then
    pmod.oenable = 8b11111111; // pmod all output
    pmod.o       = {audio.i2s,oled_mosi,oled_clk,oled_dc,oled_resn}; // pmod pins
$$end
$$if SPIFLASH then
    reg_miso     = sf_miso; // register flash miso
$$end
    // ---- memory mapping to peripherals: writes
    if (/*memio.wenable[0,1] &*/ memio.addr[11,1]) {
      leds      = mem.wdata[0,5] & {5{memio.addr[0,1]}};
$$if SIMULATION then
      if (memio.addr[0,1]) { __display("[cycle %d] LEDs: %b (%d)",cycle,leds,mem.wdata); }
$$end
$$if OLED or PMOD then
      // command
      displ_en     = (mem.wdata[9,1] | mem.wdata[10,1]) & memio.addr[1,1];
      // reset
      oled_resn    = ~ (mem.wdata[0,1] & memio.addr[2,1]);
$$end
$$if PMOD then
      audio_sample = memio.addr[3,1] ? memio.wdata[0,widthof(audio_sample)] : audio_sample;
$$end
$$if SPIFLASH then
			sf_clk  = memio.addr[4,1] ? mem.wdata[0,1] : sf_clk;
			sf_mosi = memio.addr[4,1] ? mem.wdata[1,1] : sf_mosi;
			sf_csn  = memio.addr[4,1] ? mem.wdata[2,1] : sf_csn;
$$end
$$if SIMULATION then
      if (memio.addr[4,1]) {
			  __display("[cycle %d] SPI write %b",cycle,mem.wdata[0,3]);
			}
$$end
    }
$$if SIMULATION then
    cycle = cycle + 1;
$$end
  }

  algorithm {
$$if SIMULATION and not BARE and not OLED then
	  while (cycle < 16384) { }
$$else
		while (1) { }
$$end
  }

}

// --------------------------------------------------

$$if OLED or PMOD then

$include('ice-v-oled.si')

$$end

// --------------------------------------------------

$$if PMOD then

// Sends 16 bits words to the audio chip (PCM5102)
//
// we use the pre-processor to compute counters
// based on the FPGA frequency and target audio frequency.
// The audio frequency is likely to not be perfectly matched.
//
$$  base_freq_mhz      = 60   -- FPGA frequency
$$  audio_freq_khz     = 44.1 -- Audio frequency (target)
$$  base_cycle_period  = 1000/base_freq_mhz
$$  target_audio_cycle_period = 1000000/audio_freq_khz
$$  bit_hperiod_count  = math.floor(0.5 + (target_audio_cycle_period / base_cycle_period) / 64 / 2)
$$  true_audio_cycle_period = bit_hperiod_count * 64 * 2 * base_cycle_period
// Print out the periods and the effective audio frequency
$$  print('main clock cycle period    : ' .. base_cycle_period .. ' nsec')
$$  print('audio cycle period         : ' .. true_audio_cycle_period .. ' nsec')
$$  print('audio effective freq       : ' .. 1000000 / true_audio_cycle_period .. ' kHz')
$$  print('half period counter        : ' .. bit_hperiod_count)
algorithm audio_pcm_i2s(
  input  int16  sample,
  output uint4  i2s // {i2s_lck,i2s_din,i2s_bck,i2s_sck}
) {

  uint1  i2s_sck(0); // kept low (uses PCM51 internal PLL)
  uint1  i2s_bck(1); // serial clock (32 periods per audio half period)
  uint1  i2s_lck(1); // audio clock (low: right, high: left)
  uint1  i2s_din(0); // bit being sent

  uint16 data(0);    // data being sent, shifted through i2s_din
  uint4  count(0);   // counter for generating the serial bit clock
                     // NOTE: width may require adjustment on other base freqs.
  uint32 mod32(1);   // modulo 32, for audio clock

  // track expressions for posedge and negedge of serial bit clock
  uint1 negedge <:: (count == 0);
  uint1 posedge <:: (count == $bit_hperiod_count$);

  always {

    // output i2s signals
    i2s = {i2s_lck,i2s_din,i2s_bck,i2s_sck};

    // shift data out on negative edge
    if (negedge) {
      if (mod32[0,1]) {
        // next data
        data        = sample;
      } else {
        // shift next bit (MSB first)
        // NOTE: as we send 16 bits only, the remaining 16 bits are zeros
        data = data << 1;
      }
    }

    // data out (MSB first)
    i2s_din = data[15,1];

    // update I2S clocks
    i2s_bck = (negedge | posedge)    ? ~i2s_bck : i2s_bck;
    i2s_lck = (negedge & mod32[0,1]) ? ~i2s_lck : i2s_lck;

    // update counter and modulo
    count   = (count == $bit_hperiod_count*2-1$) ? 0 : count + 1;
    mod32   = negedge ? {mod32[0,1],mod32[1,31]} : mod32;

  }

}

$$end

// --------------------------------------------------
