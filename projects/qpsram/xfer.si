// @sylefeb 2023
// https://github.com/sylefeb/Silice
// MIT license, see LICENSE_MIT in Silice repo root
// --------------------------------------------------------------
//
// QSPRAM communication firmware
//
// --------------------------------------------------------------

$$ bank_width = 23
$$ num_banks = 4
$$if BROT then
$$ num_banks = 1
$$end

$$if SIMULATION then
$$print("simulating ICE40 cells")
$$ICE40_SIMULATION = 1
$$ICE40 = 1
// append('../../tools/fpga-binutils/mingw64/bin/share/ice40/cells_sim.v')
append('ice40_cells_sim.v')
$$end

$$if ICESTICK then
  import('../common/plls/icestick_100.v')
  $$uart_in_clock_freq_mhz = 100
  $$qpsram_fast            = true  -- false if freq <= 60
$$elseif ICEBREAKER then
  import('../common/plls/icebrkr_50.v')
  $$uart_in_clock_freq_mhz = 50
$$elseif ECPIX5 then
  import('../common/plls/ecpix5_50.v')
  $$uart_in_clock_freq_mhz = 50
$$elseif ULX3S then
  import('../common/plls/ulx3s_90.v')
  $$uart_in_clock_freq_mhz = 90
  $$qpsram_fast            = true   -- false if freq <= 60
$$elseif BROT then
  import('../common/plls/brot_25_lock.v')
  $$uart_in_clock_freq_mhz = 25
$$else
  $$uart_in_clock_freq_mhz = 100
$$end

$$if ICE40 then
// for convenience on DFU devices, adding the capability to reset to DFU
import('../common/ice40_warmboot.v')
$$end

$$if BROT then
$include('../common/qpsram2x.si') // NOTE: special for musbx
$$else
$include('../common/qpsram2x.si')
$$end

$$uart_bauds = 115200 -- 500000
$include('../common/uart.si')

unit main(
  output  uint5 leds,
  input   uint1 uart_rx,
  output  uint1 uart_tx,
  inout   uint1 ram_io0,
  inout   uint1 ram_io1,
  inout   uint1 ram_io2,
  inout   uint1 ram_io3,
  output  uint1 ram_clk(0),
  output  uint1 ram_csn(0),
  output  uint2 ram_bank(2b00),
$$if BROT then
  output  uint1 sd_csn(0), /// NOTE: special for musbx
  output  uint1 sd_clk(0),
  output  uint1 sd_mosi(0),
  input   uint1 sd_miso,
$$end
)
// clocking (pll) and reset
$$if ICESTICK or ICEBREAKER then
<@clock_pll> {
  uint1 clock_pll = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock_pll,
  );
$$elseif BROT then
<@clock_pll,!rst> {
  uint1 clock_pll = uninitialized;
  uint1 rst       = uninitialized;
  pll pllgen(
    clock_in  <: clock,
    clock_out :> clock_pll,
    reset     :> rst
  );
$$elseif ECPIX5 or ULX3S then
<@clock_pll> {
  uint1 clock_pll = uninitialized;
  uint1 locked    = uninitialized;
  pll pllgen(
    clkin     <: clock,
    clkout0   :> clock_pll,
    locked    :> locked
  );
$$else
{
$$end

  // QPSRAM RAM
  qpsram_ram ram(
    ram_csn  :> ram_csn,
    ram_clk  :> ram_clk,
    ram_io0 <:> ram_io0,
    ram_io1 <:> ram_io1,
    ram_io2 <:> ram_io2,
    ram_io3 <:> ram_io3,
  );

  // UART receiver
  uart_in ui;
  uart_receiver urecv(io <:> ui,uart_rx <: uart_rx);

  // UART sender
  uart_out uo;
  uart_sender usend(
    io      <:> uo,
    uart_tx :>  uart_tx
  );

$$if ICE40 then
  uint2 slot_boot(2b01);
  ice40_warmboot wboot(slot <: slot_boot);
$$end

  uint1  enabled(0);
  uint1  write(0);
  uint1  restart(0);

  uint32 addr(0);
  uint4  get_addr(4b1111);

  uint32 size_m1(0);
  uint4  get_size(4b1111);

  uint32 cur_addr(0);

  uint32 blip(0);

  always_before {
    uo.data_in_ready = 0; // maintain low, pulse high to send
    ram.in_ready     = 0; // maintain low, pulse high to read/write
    ram.init         = 0; // maintain low, pulse high to init
  }

  algorithm {

$$if not SIMULATION then
    leds = 3b001;
    uint28 delay(0);
    while(~delay[27,1]) { delay = delay + 1; }
    leds = 0;
$$end

    // initialize all four banks
$$for bank=0,num_banks-1 do
    ram_bank = $bank$;
    ram.init = 1;
    while (ram.busy) {}
$$end

$$if SIMULATION then
    // test
    ram.addr     = {1b1,{$bank_width${1b1}}};
    ram_bank     = 2b00;
    ram.in_ready = 1;
    ram.wdata    = 8h55;
    ram.wenable  = 1;
    while (ram.busy) {}
    ram.addr     = {1b1,{$bank_width${1b1}}};
    ram_bank     = 2b00;
    ram.in_ready = 1;
    ram.wdata    = 8h7A;
    ram.wenable  = 1;
    while (ram.busy) {}
++:
++:
++:
    __finish();
$$end

    while (1) {
      // wait for size and address
      while (get_size[0,1]) { } // size arrives last
      // do some work
      int33 n      = size_m1;
      ram.wenable  = write;
      cur_addr     = addr;
      while (~n[32,1]) { // stop on n negative
        // receive from uart
        while (write & ~ui.data_out_ready) { }
        // read/write from psram
        ram.addr     = {1b0,cur_addr[0,$bank_width$]};
        ram_bank     = cur_addr[$bank_width$,2];
        ram.in_ready = 1;
        ram.wdata    = ui.data_out;
        while (ram.busy) {}
        // send over uart
        uo.data_in       = ram.rdata;
        uo.data_in_ready = ~write;
        while (uo.busy) {}
        leds         = ram.rdata ^ ram.wdata;
        // next
        cur_addr = cur_addr + 1;
        n        = n - 1;
      }
      restart = 1;
    }
  }

  always_after {
    // leds         = {ram_bank,write,1b1,blip};
    blip         = blip >> 1;
    // receiving
    if (ui.data_out_ready) {
      // read size (if enabled and address received)
      size_m1     = get_size[0,1] & ~get_addr[0,1]
                  ? {size_m1[0,24],ui.data_out} : size_m1;
      get_size    = enabled       & ~get_addr[0,1]
                  ? get_size>>1 : get_size;
      // read address (if enabled)
      addr         = get_addr[0,1] ? {addr[0,24],ui.data_out} : addr;
      get_addr     = enabled       ? get_addr>>1 : get_addr;
      // pulse LEDs
      blip         = enabled       ? 32hffffffff : 0;
      // write? (top bit of enabling tag)
      write        = ( ~enabled & (ui.data_out      == 8hD5) ) ? 1 : write;
$$if ICE40 then
      // warmboot?
      wboot.boot   = ( ~enabled & (ui.data_out      == 8hE5) ) ? 1 : 0;
$$end
      // enable on tag
      enabled      = ( enabled  | (ui.data_out[0,7] == 8h55));
    } else {
      if (restart) { // on restart
        enabled  = 0;
        get_size = 4b1111;
        get_addr = 4b1111;
        write    = 0;
        restart  = 0;
      }
    }
  }

}
